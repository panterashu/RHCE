ISCSI

The Internet Small Computer System Interface (iSCSI) is a TCP/IP-based protocol for emulating a SCSI high-performance 
local storage bus over IP networks, providing data transfer and management to remote block storage devices.

##########
iSCSI target (adica de unde exporti storage)
##########
In iSCSI, in which the SCSI bus is emulated across an IP network, a target can be a dedicated physical device 
in a network-attached storage enclosure or an iSCSI software-configured logical device on a networked storage server.

To provide access to the storage or output device, a target is configured with one or more logical unit numbers (LUNs). 
In iSCSI, LUNs appear as the target's sequentially numbered disk drives, although targets typically have only one LUN.

targetcli is both a command-line utility and an interactive shell in which to create, delete, and configure iSCSI target components.

Install targetcli
yum -y install targetcli

Run targetcli with no options to enter interactive mode.

ca sa vezi ce si cum:
[root@server0 ~]# targetcli
/> ls

Create backing storage (backstores). There are several types of backing storage:

block - A block device defined on the server. A disk drive, disk partition, a logical volume, multipath device, 
any device files defined on the server that are of type b.

fileio - Create a file, of a specified size, in the filesystem of the server. 
This method is similar to using image files to be the storage for virtual machine disk images.

pscsi - Physical SCSI. Permits passthrough to a physical SCSI device connected to the server. 
This backstore type is not typically used.

ramdisk - Create a ramdisk device, of a specified size, in memory on the server

- exemplu de creat
/> cd /backstores/
/backstores> block/ create block1 /dev/iSCSI_vg/disk1_lv
Created block storage object block1 using /dev/iSCSI_vg/disk1_lv.
/backstores> block/ create block2 /dev/vdb2
Created block storage object block2 using /dev/vdb2.
/backstores> fileio/ create file1 /root/disk1_file 100M
Created fileio file1 with size 104857600
/backstores> ls
o- backstores ............................................................ [...]
o- block ................................................ [Storage Objects: 2]
| o- block1 ....... [/dev/iSCSI_vg/disk1_lv (100.0MiB) write-thru deactivated]
| o- block2 ...................... [/dev/vdb2 (1.0GiB) write-thru deactivated]
o- fileio ............................................... [Storage Objects: 1]
| o- file1 .............. [/root/disk1_file (100.0MiB) write-back deactivated]
o- pscsi ................................................ [Storage Objects: 0]
o- ramdisk .............................................. [Storage Objects: 0]

Create an IQN for the target. This step will also create a default TPG underneath the IQN:

/backstores> cd /iscsi/
/iscsi> create iqn.2014-06.com.example:remotedisk1
Created target iqn.2014-06.com.example:remotedisk1.
Created TPG 1.
/iscsi> ls
o- iscsi .......................................................... [Targets: 1]
o- iqn.2014-06.com.example:remotedisk1 ............................. [TPGs: 1]
o- tpg1 ............................................. [no-gen-acls, no-auth]
o- acls ........................................................ [ACLs: 0]
o- luns ........................................................ [LUNs: 0]
o- portals .................................................. [Portals: 0]

In the TPG, create an ACL for the client node to be used later. Because the global auto_add_mapped_luns parameter 
is set to true (default), any existing LUNs in the TPG are mapped to each ACL as it is created.

/iscsi> cd iqn.2014-06.com.example:remotedisk1/tpg1/
/iscsi/iqn.20...sk1/tpg1> acls/ create iqn.2014-06.com.example:desktop0
Created NODE ACL for iqn.2014-06.com.example:desktop0
/iscsi/iqn.20...:server0/tgp1> ls
o- tpg1 ................................................. [no-gen-acls, no-auth]
o- acls ............................................................ [ACLs: 1]
| o- iqn.2014-06.com.example:desktop0 ....................... [Mapped LUNs: 0]
o- luns ............................................................ [LUNs: 0]
o- portals ...................................................... [Portals: 0]

This ACL configures the target to only accept initiator connections from a client presenting
iqn.2014-06.com.example:desktop0 as it's initiator IQN, also known as the initiator
name.

In this TPG, create a LUN for each existing backstores. This step also activates each
backstore. Because acls exist for the TPG, they will be automatically assigned to each LUN
created.

/iscsi/iqn.20...:server0/tgp1> luns/ create /backstores/block/block1
Created LUN 0.
Created LUN 0->0 mapping in node ACL iqn.2014-06.com.example:desktop0
/iscsi/iqn.20...:server0/tgp1> luns/ create /backstores/block/block2
Created LUN 1.
Created LUN 1->1 mapping in node ACL iqn.2014-06.com.example:desktop0
/iscsi/iqn.20...:server0/tgp1> luns/ create /backstores/fileio/file1
Created LUN 2.
Created LUN 2->2 mapping in node ACL iqn.2014-06.com.example:desktop0
/iscsi/iqn.20...:server0/tgp1> ls
o- tpg1 ................................................. [no-gen-acls, no-auth]
o- acls ............................................................ [ACLs: 1]
| o- iqn.2014-06.com.example:desktop0 ....................... [Mapped LUNs: 3]
| o- mapped_lun0 .................................. [lun0 block/block1 (rw)]
| o- mapped_lun1 .................................. [lun1 block/block2 (rw)]
| o- mapped_lun2 .................................. [lun2 fileio/file1 (rw)]
o- luns ............................................................ [LUNs: 3]
| o- lun0 ............................ [block/block1 (/dev/iSCSI_vg/disk1_lv)]
| o- lun1 ......................................... [block/block2 (/dev/vdb2)]
| o- lun2 .................................. [fileio/file1 (/root/disk1_file)]
o- portals ...................................................... [Portals: 0]

Still inside the TPG, create a portal configuration to designate the listening IP address and
ports. Create a portal using the system's public network interface. Without specifying a TCP
port to use, the portal creation will default to the standard iSCSI port (3260).

/iscsi/iqn.20...:server0/tgp1> portals/ create 172.25.0.11
Using default IP port 3260
Created network portal 172.25.0.11:3260
/iscsi/iqn.20...:server0/tgp1> ls
o- tpg1 ................................................. [no-gen-acls, no-auth]
o- acls ............................................................ [ACLs: 1]
| o- iqn.2014-06.com.example:desktop0 ....................... [Mapped LUNs: 3]
| o- mapped_lun0 .................................. [lun0 block/block1 (rw)]
| o- mapped_lun1 .................................. [lun1 block/block2 (rw)]
| o- mapped_lun2 .................................. [lun2 fileio/file1 (rw)]
o- luns ............................................................ [LUNs: 3]
| o- lun0 ............................ [block/block1 (/dev/iSCSI_vg/disk1_lv)]
| o- lun1 ......................................... [block/block2 (/dev/vdb2)]
| o- lun2 .................................. [fileio/file1 (/root/disk1_file)]
o- portals ...................................................... [Portals: 1]
o- 172.25.0.11:3260 ................................................... [OK]

If the IP is not specified with the portal creation, an IP of 0.0.0.0 will be used. This will
permit connections on all network interfaces defined on the server.

View the entire configuration, then exit targetcli. targetcli will automatically save
upon exit. The resulting persistent configuration file is stored in JavaScript Object Notation
(JSON) format.

/iscsi/iqn.20...:server0/tgp1> cd /
/> ls
o- / ..................................................................... [...]
o- backstores .......................................................... [...]
| o- block .............................................. [Storage Objects: 2]
| | o- block1 ....... [/dev/iSCSI_vg/disk1_lv (100.0MiB) write-thru activated]
| | o- block2 ...................... [/dev/vdb2 (1.0GiB) write-thru activated]
| o- fileio ............................................. [Storage Objects: 1]
| | o- file1 .............. [/root/disk1_file (100.0MiB) write-back activated]
| o- pscsi .............................................. [Storage Objects: 0]
| o- ramdisk ............................................ [Storage Objects: 0]
o- iscsi ........................................................ [Targets: 1]
| o- iqn.2014-06.com.example:remotedisk1 ........................... [TPGs: 1]
| o- tpg1 ........................................... [no-gen-acls, no-auth]
| o- acls ...................................................... [ACLs: 1]
| | o- iqn.2014-06.com.example:desktop0 ................. [Mapped LUNs: 3]
| | o- mapped_lun0 ............................ [lun0 block/block1 (rw)]
| | o- mapped_lun1 ............................ [lun1 block/block2 (rw)]
| | o- mapped_lun2 ............................ [lun2 fileio/file1 (rw)]
| o- luns ...................................................... [LUNs: 3]
| | o- lun0 ...................... [block/block1 (/dev/iSCSI_vg/disk1_lv)]
| | o- lun1 ................................... [block/block2 (/dev/vdb2)]
| | o- lun2 ............................ [fileio/file1 (/root/disk1_file)]
| o- portals ................................................ [Portals: 1]
| o- 172.25.0.11:3260 ............................................. [OK]
o- loopback ..................................................... [Targets: 0]
/> exit
Global pref auto_save_on_exit=true
Last 10 configs saved in /etc/target/backup.
Configuration saved to /etc/target/saveconfig.json

Add a port exemption to the default firewall for port 3260, the standard iSCSI port.
firewall-cmd --add-port=3260/tcp
firewall-cmd --add-port=3260/tcp --permanent

Enable the target.service systemd unit

systemctl enable target

####################################################################################################
EXEMPLU CUM SE EXPORTA
####################################################################################################

1. Install the targetcli RPM.
yum -y install targetcli

2. Enable and start the target service.
systemctl enable target
systemctl start target

3. Open the iSCSI server port on the firewall as a permanent change. Reload the configuration for immediate use.
firewall-cmd --permanent --add-port=3260/tcp
firewall-cmd --reload


4. Configure the existing /dev/iSCSI_vg/disk1_lv logical volume as a block-type backingstore. 
Use the name serverX.disk1 for the backstore, replacing X with your system number.
targetcli
/> /backstores/block/ create serverX.disk1 /dev/iSCSI_vg/disk1_lv

5. Create a unique iSCSI Qualified Name (IQN) for the target. The target will be iqn.2014-06.com.example:serverX.
/> /iscsi create iqn.2014-06.com.example:serverX

6. Create an ACL for the client node (initiator). The initiator will be connecting with it's initiator
name set to iqn.2014-06.com.example:desktopX.
/> /iscsi/iqn.2014-06.com.example:serverX/tpg1/acls/ create iqn.2014-06.com.example:desktopX

7. Create a LUN under the target, the LUN should use the previously defined backing storage device named serverX.disk1.
/> /iscsi/iqn.2014-06.com.example:serverX/tpg1/luns create /backstores/block/ serverX.disk1

8. Configure a portal for the target to listen on 172.25.X.11, port 3260.
/> /iscsi/iqn.2014-06.com.example:serverX/tpg1/portals create 172.25.X.11

9. View, verify, and save the target server configuration:

/> ls
o- / ............................................................. [...]
o- backstores .................................................. [...]
| o- block ...................................... [Storage Objects: 1]
| | o- serverX.disk1 .....
.....[/dev/iSCSI_vg/disk1_lv (100.0MiB) write-thru activated]
| o- fileio ..................................... [Storage Objects: 0]
| o- pscsi ...................................... [Storage Objects: 0]
| o- ramdisk .................................... [Storage Objects: 0]
o- iscsi ................................................ [Targets: 1]
| o- iqn.2014-06.com.example:serverX ....................... [TPGs: 1]
| o- tpg1 ................................... [no-gen-acls, no-auth]
| o- acls .............................................. [ACLs: 1]
| | o- iqn.2014-06.com.example:desktopX ......... [Mapped LUNs: 1]
| | | o- mapped_lun0 ............ [lun1 block/serverX.disk1 (rw)]
| o- luns .............................................. [LUNs: 1]
| | o- lun0 ...... [block/serverX.disk1 (/dev/iSCSI_vg/disk1_lv)]
| o- portals ........................................ [Portals: 1]
| o- 172.25.X.11:3260 ..................................... [OK]
o- loopback ............................................. [Targets: 0]

####################################################################################################
EXEMPLU CUM SE MONTEAZA
####################################################################################################

1.Install the iscsi-initiator-utils RPM, if not already installed.
yum install -y iscsi-initiator-utils

2. Create a unique iSCSI Qualified Name for the client initiator by modifying the InitiatorName setting in 
/etc/iscsi/initiatorname.iscsi. Use the client system name as the optional string after the colon.

vi /etc/iscsi/initiatorname.iscsi
InitiatorName=iqn.2014-06.com.example:desktopX

3. Enable and start the iscsi client service.
systemctl enable iscsi; systemctl start iscsi

4. Discover the configured iSCSI target(s) provided by the iSCSI target server portal.
iscsiadm -m discovery -t st -p 172.25.X.11

5. Log into the presented iSCSI target.
iscsiadm -m node -T iqn.2014-06.com.example:serverX -p

6. Identify the newly available block device created by the iSCSI target login.
lsblk

7. List the targets recognized by the iscsi service.
iscsiadm -m session -P 3

8. Change directory to the location of the iSCSI node records for the remainder of this
exercise. Locate the persistent node record for the new iSCSI target.
cd /var/lib/iscsi/nodes
ls -lR























































